# 文件名: .github/workflows/build-export-lobechat.yml
# 版本：允许在没有 pnpm-lock.yaml 的情况下运行 (不推荐)
#      并增加了 Node.js 内存限制

name: Build and Export LobeChat (Next.js) # 工作流程的名称

# 触发工作流程的事件
on:
  push:
    branches: [ main, master ] # 当代码推送到 main 或 master 分支时触发 (请根据你的仓库主分支名称调整)
  workflow_dispatch: # 允许你手动在 Actions 页面触发

jobs:
  build_and_export: # 定义一个名为 'build_and_export' 的任务
    runs-on: ubuntu-latest # 指定运行环境为最新的 Ubuntu 系统

    steps: # 任务执行的步骤

      # 第 1 步：检出代码
      - name: Checkout repository
        uses: actions/checkout@v4 # 使用官方的 checkout 动作

      # 第 2 步：设置 pnpm (LobeChat 使用 pnpm)
      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8 # 你可以指定 pnpm 版本，或移除这行使用最新稳定版

      # 第 3 步：设置 Node.js 环境
      # 注意：移除了 'cache: pnpm'
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23.x' # 指定 Node.js 版本 (请确认 LobeChat 的要求)
          # cache: 'pnpm' # <--- 已移除或注释掉此行

      # 第 4 步：安装项目依赖
      - name: Install dependencies
        run: pnpm install # 使用 pnpm 安装依赖

      # 第 5 步：编译项目 (Next.js build) - 增加内存限制
      - name: Build project
        run: pnpm build # 运行 package.json 中的 build 脚本 (通常是 next build)
        env:
          # 增加 Node.js 的可用内存到 4GB (4096 MB)
          # 如果仍然内存不足，可以尝试增加这个值，例如 6144 或 8192
          NODE_OPTIONS: --max-old-space-size=6144
        # 如果你的构建还需要其他环境变量，可以继续在这里添加：
        #   NEXT_PUBLIC_SOME_VAR: 'some_value'

      # 第 6 步：导出静态文件 (Next.js export)
      # 如果此步骤也内存不足，可以取消下面 env 块的注释
      - name: Export static files
        run: pnpm exec next export # 运行 next export 命令
        # env:
        #   NODE_OPTIONS: --max-old-space-size=4096

      # 第 7 步：上传静态导出文件 (out 目录) 作为 Artifact
      - name: Upload static export artifact
        uses: actions/upload-artifact@v4
        with:
          name: lobechat-static-export # 上传的压缩包名称
          path: ./out # 指定要上传的文件夹路径 (Next.js 静态导出默认是 'out')

